//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.17929
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Timbrado.wsTimbrado {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TimbrarV3Soap", Namespace="http://localhost/Timbrar/")]
    public partial class TimbrarV3 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getTimbreOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimbreCFDIOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimbresZIPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TimbrarV3() {
            this.Url = global::Timbrado.Properties.Settings.Default.Timbrado_wsTimbrado_TimbrarV3;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getTimbreCompletedEventHandler getTimbreCompleted;
        
        /// <remarks/>
        public event getTimbreCFDICompletedEventHandler getTimbreCFDICompleted;
        
        /// <remarks/>
        public event getTimbresZIPCompletedEventHandler getTimbresZIPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Timbrar/getTimbre", RequestNamespace="http://localhost/Timbrar/", ResponseNamespace="http://localhost/Timbrar/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("codigo")]
        public int getTimbre(string usuario, string pwd, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] cfdi_xml_in, out string mensaje, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] timbre_utf8) {
            object[] results = this.Invoke("getTimbre", new object[] {
                        usuario,
                        pwd,
                        cfdi_xml_in});
            mensaje = ((string)(results[1]));
            timbre_utf8 = ((byte[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getTimbreAsync(string usuario, string pwd, byte[] cfdi_xml_in) {
            this.getTimbreAsync(usuario, pwd, cfdi_xml_in, null);
        }
        
        /// <remarks/>
        public void getTimbreAsync(string usuario, string pwd, byte[] cfdi_xml_in, object userState) {
            if ((this.getTimbreOperationCompleted == null)) {
                this.getTimbreOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimbreOperationCompleted);
            }
            this.InvokeAsync("getTimbre", new object[] {
                        usuario,
                        pwd,
                        cfdi_xml_in}, this.getTimbreOperationCompleted, userState);
        }
        
        private void OngetTimbreOperationCompleted(object arg) {
            if ((this.getTimbreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimbreCompleted(this, new getTimbreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Timbrar/getTimbreCFDI", RequestNamespace="http://localhost/Timbrar/", ResponseNamespace="http://localhost/Timbrar/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("codigo")]
        public int getTimbreCFDI(string usuario, string pwd, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] cfdi_xml_in, out string mensaje, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] xml_timbrado) {
            object[] results = this.Invoke("getTimbreCFDI", new object[] {
                        usuario,
                        pwd,
                        cfdi_xml_in});
            mensaje = ((string)(results[1]));
            xml_timbrado = ((byte[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getTimbreCFDIAsync(string usuario, string pwd, byte[] cfdi_xml_in) {
            this.getTimbreCFDIAsync(usuario, pwd, cfdi_xml_in, null);
        }
        
        /// <remarks/>
        public void getTimbreCFDIAsync(string usuario, string pwd, byte[] cfdi_xml_in, object userState) {
            if ((this.getTimbreCFDIOperationCompleted == null)) {
                this.getTimbreCFDIOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimbreCFDIOperationCompleted);
            }
            this.InvokeAsync("getTimbreCFDI", new object[] {
                        usuario,
                        pwd,
                        cfdi_xml_in}, this.getTimbreCFDIOperationCompleted, userState);
        }
        
        private void OngetTimbreCFDIOperationCompleted(object arg) {
            if ((this.getTimbreCFDICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimbreCFDICompleted(this, new getTimbreCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/Timbrar/getTimbresZIP", RequestNamespace="http://localhost/Timbrar/", ResponseNamespace="http://localhost/Timbrar/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("codigo")]
        public int getTimbresZIP(string usuario, string pwd, int num_cfdi, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] zip_in, out string mensaje, out int num_ok, out int num_error, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] zip_out, out string respuesta) {
            object[] results = this.Invoke("getTimbresZIP", new object[] {
                        usuario,
                        pwd,
                        num_cfdi,
                        zip_in});
            mensaje = ((string)(results[1]));
            num_ok = ((int)(results[2]));
            num_error = ((int)(results[3]));
            zip_out = ((byte[])(results[4]));
            respuesta = ((string)(results[5]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getTimbresZIPAsync(string usuario, string pwd, int num_cfdi, byte[] zip_in) {
            this.getTimbresZIPAsync(usuario, pwd, num_cfdi, zip_in, null);
        }
        
        /// <remarks/>
        public void getTimbresZIPAsync(string usuario, string pwd, int num_cfdi, byte[] zip_in, object userState) {
            if ((this.getTimbresZIPOperationCompleted == null)) {
                this.getTimbresZIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimbresZIPOperationCompleted);
            }
            this.InvokeAsync("getTimbresZIP", new object[] {
                        usuario,
                        pwd,
                        num_cfdi,
                        zip_in}, this.getTimbresZIPOperationCompleted, userState);
        }
        
        private void OngetTimbresZIPOperationCompleted(object arg) {
            if ((this.getTimbresZIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimbresZIPCompleted(this, new getTimbresZIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTimbreCompletedEventHandler(object sender, getTimbreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimbreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimbreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string mensaje {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] timbre_utf8 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTimbreCFDICompletedEventHandler(object sender, getTimbreCFDICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimbreCFDICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimbreCFDICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string mensaje {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] xml_timbrado {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getTimbresZIPCompletedEventHandler(object sender, getTimbresZIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimbresZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimbresZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string mensaje {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int num_ok {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int num_error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public byte[] zip_out {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string respuesta {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
}

#pragma warning restore 1591